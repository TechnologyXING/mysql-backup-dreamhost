#!/bin/bash
# Restore your MySQL database to a compressed file with credentials based on a .env file.

set -e #stop on error
set -o pipefail #stop on pipe error

# start of SETUP
config_path="/home/techxing/techxing.net"
# end of SETUP

backup_destination="$(dirname $(readlink -f $0))/backups" # absolute path of this script plus a backup folder
db_conf="${config_path}/.env" # "/absolute/path/to/wordpress/.env"
db_name=$(grep "DB_NAME=[^']*[^']" "${db_conf}" | cut -d "=" -f 2 | sed $'s/[^[:print:]\t]//g')
db_user=$(grep "DB_USER=[^']*[^']" "${db_conf}" | cut -d "=" -f 2 | sed $'s/[^[:print:]\t]//g')
db_pass=$(grep "DB_PASSWORD=[^']*[^']" "${db_conf}" | cut -d "=" -f 2 | sed $'s/[^[:print:]\t]//g')
db_host=$(grep "DB_HOST=[^']*[^']" "${db_conf}" | cut -d "=" -f 2 | sed $'s/[^[:print:]\t]//g')

file_name="${1}"
restore_path="${backup_destination}/${file_name}"

if [ -z "${file_name}" ]; then
    echo "You must supply a file name, example: ${0} ${db_name}_$(date +%Y%m%d-%H%M%S).sql.gz"
    exit 1
fi

if [ ! -f "${restore_path}" ]; then
    echo "'${restore_path}' not found"
    exit 1
fi

read -p "Restoring is going to wipe your current database, are you sure (y/n)? " -n 1 -r
echo
if [[ ! "${REPLY}" =~ ^[yY]$ ]]; then
    echo "The '${db_name}' database was not restored because you didn't type y or Y."
    exit 1
fi

# Uncomment to show the variables extracted. The whole script will stop before doing the mysqldump.
# printf "VARS: \n\${db_conf} = '${db_conf}' \n\${db_name} = '${db_name}' \n\${db_user} = '${db_user}' \n\${db_pass} = '${db_pass}' \n\${db_host} = '${db_host}' \nRESTORE PATH: '${restore_path}' \n"; exit;

# MySQL / MariaDB.
zcat "${restore_path}" | mysql  -h "${db_host}" -u "${db_user}" -p"${db_pass}" "${db_name}"

echo "The '${db_name}' database was successfully restored from '${file_name}'"